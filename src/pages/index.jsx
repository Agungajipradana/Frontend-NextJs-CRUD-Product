import Head from "next/head";
import { Button, Container, FormControl, FormLabel, Heading, Input, Spinner, Table, Tbody, Td, Th, Thead, Tr, VStack, useToast } from "@chakra-ui/react";
import { useFormik } from "formik";
import { useFetchProducts, useCreateProduct, useEditProduct, useDeleteProduct } from "../features/product";

export default function Home() {
  const toast = useToast();

  const {
    data,
    isLoading: productsIsLoading,
    refetch: refetchProducts,
  } = useFetchProducts({
    onError: () => {
      toast({
        title: "Ada kesalahan terjadi",
        status: "error",
      });
    },
  });

  const formik = useFormik({
    initialValues: {
      name: "",
      price: 0,
      description: "",
      image: "",
    },
    onSubmit: async () => {
      const { name, price, description, image, id } = formik.values;

      if (id) {
        // Melakukan PATCH /products/{id}
        editProduct({
          name,
          price: parseInt(price),
          description,
          image,
          id,
        });
        toast({
          title: "product  edited",
          status: "Succees",
        });
      } else {
        // Melakukan POST /products
        createProduct({
          name,
          price: parseInt(price),
          description,
          image,
        });
        toast({
          title: "product  added",
          status: "Succees",
        });
      }

      // Mereset form ketika selesai di input
      formik.setFieldValue("name", "");
      formik.setFieldValue("price", 0);
      formik.setFieldValue("description", "");
      formik.setFieldValue("image", "");
      formik.setFieldValue("id", 0);
    },
  });

  const { mutate: createProduct, isLoading: createProductsIsLoading } = useCreateProduct({
    onSuccess: () => {
      refetchProducts();
    },
  });

  const { mutate: deleteProduct } = useDeleteProduct({
    onSuccess: () => {
      refetchProducts();
    },
  });

  const { mutate: editProduct, isLoading: editProductIsLoading } = useEditProduct({
    onSuccess: () => {
      refetchProducts();
    },
  });

  const handleFormInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value);
  };

  const confirmationDelete = (productId) => {
    const shouldDelete = confirm("Are you sure?");

    if (shouldDelete) {
      deleteProduct(productId);
      toast({
        title: "Delete Product",
        status: "info",
      });
    }
  };

  const onEditClick = (product) => {
    formik.setFieldValue("id", product.id);
    formik.setFieldValue("name", product.name);
    formik.setFieldValue("price", product.price);
    formik.setFieldValue("description", product.description);
    formik.setFieldValue("image", product.image);
  };

  const renderProducts = () => {
    return data?.data.map((product) => {
      return (
        <Tr key={product.id}>
          <Td>{product.id}</Td>
          <Td>{product.name}</Td>
          <Td>{product.price}</Td>
          <Td>{product.description.substring(0, 25)}...</Td>
          <Td>{product.image.substring(0, 20)}...</Td>
          <Td>
            <Button onClick={() => onEditClick(product)} colorScheme="cyan">
              Edit{" "}
            </Button>
            <Button onClick={() => confirmationDelete(product.id)} colorScheme="red">
              Delete{" "}
            </Button>
          </Td>
        </Tr>
      );
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {/* <Container> */}
        <Heading>Home Page </Heading>
        <Table mb="6">
          <Thead>
            <Tr>
              <Th>ID</Th>
              <Th>Name</Th>
              <Th>Price</Th>
              <Th>Description</Th>
              <Th>Image</Th>
              <Th colSpan={2}>Action</Th>
            </Tr>
          </Thead>
          <Tbody>
            {renderProducts()}
            {productsIsLoading ? <Spinner /> : null}
          </Tbody>
        </Table>
        <form onSubmit={formik.handleSubmit}>
          <VStack spacing="3">
            <FormControl>
              <FormLabel>Product ID</FormLabel>
              <Input onChange={handleFormInput} name="id" value={formik.values.id} />
            </FormControl>
            <FormControl>
              <FormLabel>Product Name</FormLabel>
              <Input onChange={handleFormInput} name="name" value={formik.values.name} />
            </FormControl>
            <FormControl>
              <FormLabel>Price</FormLabel>
              <Input onChange={handleFormInput} name="price" value={formik.values.price} />
            </FormControl>
            <FormControl>
              <FormLabel>Descritption</FormLabel>
              <Input onChange={handleFormInput} name="description" value={formik.values.description} />
            </FormControl>
            <FormControl>
              <FormLabel>Image</FormLabel>
              <Input onChange={handleFormInput} name="image" value={formik.values.image} />
            </FormControl>
            {createProductsIsLoading || editProductIsLoading ? <Spinner /> : <Button type="submit">Submit Product</Button>}
          </VStack>
        </form>
        {/* </Container> */}
      </main>
    </>
  );
}
